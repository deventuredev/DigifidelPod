// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Loooot
import ARKit
import AVFoundation
import CoreImage.CIFilterBuiltins
import CoreImage
import CoreLocation
import Foundation
@_exported import Loooot
import MapKit
import SceneKit
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
@_hasMissingDesignatedInitializers public class PreferencesConstants {
  public static let firstUse: Swift.String
  public static let termsAndConditions: Swift.String
  @objc deinit
}
@available(iOS 11.0, *)
extension Loooot.SceneLocationView : ARKit.ARSCNViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, nodeFor anchor: ARKit.ARAnchor) -> SceneKit.SCNNode?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didAdd node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, willUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didRemove node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
}
@available(iOS 11.0, *)
extension Loooot.SceneLocationView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, didFailWithError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, cameraDidChangeTrackingState camera: ARKit.ARCamera)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionWasInterrupted(_ session: ARKit.ARSession)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionInterruptionEnded(_ session: ARKit.ARSession)
  @available(iOS 11.3, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionShouldAttemptRelocalization(_ session: ARKit.ARSession) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, didOutputAudioSampleBuffer audioSampleBuffer: CoreMedia.CMSampleBuffer)
}
@available(iOS 11.0, *)
extension Loooot.SceneLocationView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didRenderScene scene: SceneKit.SCNScene, atTime time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, updateAtTime time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didApplyAnimationsAtTime time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didSimulatePhysicsAtTime time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didApplyConstraintsAtTime time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, willRenderScene scene: SceneKit.SCNScene, atTime time: Foundation.TimeInterval)
}
public class ThemeImages {
  public init(logo: Swift.String, cameraPermission: Swift.String, cameraPermissionDenied: Swift.String, locationPermission: Swift.String, locationPermissionDenied: Swift.String, noInternet: Swift.String, placeholderImage: Swift.String, campaignTab: Swift.String, homeTab: Swift.String, walletTab: Swift.String, startExperience: Swift.String, emptyCampaignList: Swift.String, emptyTokenList: Swift.String, emptyWallet: Swift.String, pinTab: Swift.String, faqTab: Swift.String, mapTypeMapView: Swift.String, mapTypeSatelliteView: Swift.String, back: Swift.String)
  public func getAppLogo() -> UIKit.UIImage
  public func setAppLogo(name: Swift.String)
  public func getCameraPermissionImage() -> UIKit.UIImage
  public func setCameraPermissionImage(name: Swift.String)
  public func getCameraDeniedImage() -> UIKit.UIImage
  public func setCameraDeniedImage(name: Swift.String)
  public func getLocationPermissionImage() -> UIKit.UIImage
  public func setLocationPermissionImage(name: Swift.String)
  public func getLocationDeniedImage() -> UIKit.UIImage
  public func setLocationDeniedImage(name: Swift.String)
  public func getNoInternetImage() -> UIKit.UIImage
  public func setNoInternetImage(name: Swift.String)
  public func getImagePlaceholder() -> UIKit.UIImage
  public func setImagePlaceholder(name: Swift.String)
  public func getPinTabImage() -> UIKit.UIImage
  public func setPinTabImage(name: Swift.String)
  public func getFAQTabImage() -> UIKit.UIImage
  public func setFAQTabImage(name: Swift.String)
  public func getCampaignTabImage() -> UIKit.UIImage
  public func setCampaignTabImage(name: Swift.String)
  public func getHomeTabImage() -> UIKit.UIImage
  public func setHomeTabImage(name: Swift.String)
  public func getWalletTabImage() -> UIKit.UIImage
  public func setWalletTabImage(name: Swift.String)
  public func getStartExperienceImage() -> UIKit.UIImage
  public func setStartExperienceImage(name: Swift.String)
  public func getEmptyCampaignImage() -> UIKit.UIImage
  public func setEmptyCampaignImage(name: Swift.String)
  public func getEmptyTokenListImage() -> UIKit.UIImage
  public func setEmptyTokenListImage(name: Swift.String)
  public func getEmptyWalletImage() -> UIKit.UIImage
  public func setEmptyWalletImage(name: Swift.String)
  public func getBackIcon() -> UIKit.UIImage
  public func setBackIcon(name: Swift.String)
  public func getMenuIcon() -> UIKit.UIImage
  public func getMapTypeMapViewImage() -> UIKit.UIImage
  public func getMapTypeSatelliteViewImage() -> UIKit.UIImage
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setImage(imageUrl: Swift.String?, placeholder: UIKit.UIImage)
}
@objc @_inheritsConvenienceInitializers public class NetworkManager : ObjectiveC.NSObject {
  public static let shared: Loooot.NetworkManager
  public var reachability: Loooot.Reachability!
  @objc override dynamic public init()
  public func startNotifier()
  public func stopNotifier()
  public func isReachable() -> Swift.Bool
  public func isReachableViaCellular() -> Swift.Bool
  public func isReachableViaWiFi() -> Swift.Bool
  @objc deinit
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public var visibleViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static func getVisibleViewControllerFrom(_ vc: UIKit.UIViewController?) -> UIKit.UIViewController?
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class RewardDetailsViewController : UIKit.UIViewController, UIKit.UINavigationBarDelegate, Loooot.RewardDetailsViewInitializeDelegate {
  @_Concurrency.MainActor(unsafe) public static let StoryboardName: Swift.String
  @_Concurrency.MainActor(unsafe) public var delegateView: Loooot.RewardDetailsDelegate!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func setNavigationBarTitle(title: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setDelegateView(view: Loooot.RewardDetailsDelegate)
  @_Concurrency.MainActor(unsafe) public func setRewardIds(rewardId: Swift.Int64?, rewardTypeId: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol RewardDetailsViewInitializeDelegate {
  func setNavigationBarTitle(title: Swift.String)
}
public protocol RewardDetailsDelegate {
  func removeRewardFromWallet(rewardIdToRemove: Swift.Int64)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class RewardDetailsView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var viewInitializeDelegate: Loooot.RewardDetailsViewInitializeDelegate?
  @_Concurrency.MainActor(unsafe) public var delegate: Loooot.RewardDetailsDelegate?
  @_Concurrency.MainActor(unsafe) public var ticketNumber: Swift.String?
  @_Concurrency.MainActor(unsafe) public var expirationDate: Foundation.Date?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func setById(rewardId: Swift.Int64?, typeId: Swift.Int64)
  @_Concurrency.MainActor(unsafe) public func setViewBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRedeemButtonTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRedeemButtonColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setDescriptionTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setTokenNameTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRedemptionTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setLoadingViewColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRedeemButtonText(text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setRedemptionRulesText(text: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResponseCode {
  public static let notSet: Swift.Int
  public static let success: Swift.Int
  public static let error: Swift.Int
  public static let errorEmailInvalid: Swift.Int
  public static let errorSavingEntity: Swift.Int
  public static let errorNameCollision: Swift.Int
  public static let errorFailedToUpdateMedia: Swift.Int
  public static let errorGetCampaignTokenType: Swift.Int
  public static let errorGetCampaigns: Swift.Int
  public static let errorGetTokenType: Swift.Int
  public static let errorGetLocationTokens: Swift.Int
  public static let errorGetTokenToClaim: Swift.Int
  public static let errorClaimingToken: Swift.Int
  public static let errorUpdateClaimedTokenStatus: Swift.Int
  public static let noTokensInWallet: Swift.Int
  public static let errorGetTokenToRedeem: Swift.Int
  public static let errorUpdateRedeemedTokenStatus: Swift.Int
  public static let errorGetWalletTokens: Swift.Int
  public static let errorRedeemingToken: Swift.Int
  public static let errorTokenAlreadyClaimed: Swift.Int
  public static let errorCannotCollectMoreTokensPerCampaign: Swift.Int
  public static let errorCannotCollectMoreTokensPerDay: Swift.Int
  public static let errorCannotCollectMoreTokensPerHour: Swift.Int
  public static let errorCannotClaimTokensBecauseOfProximity: Swift.Int
  public static let errorCampaignNotAvailable: Swift.Int
  public static let successHourlyLimitReached: Swift.Int
  public static let successDailyLimitReached: Swift.Int
  public static let successCampaignLimitReached: Swift.Int
  public static func cannotCollectMoreTokens(statusCode: Swift.Int) -> Swift.Bool
  public static func limitReached(statusCode: Swift.Int) -> Swift.Bool
  @objc deinit
}
public class CampaignMinified {
  public init()
  public init(id: Swift.Int64, name: Swift.String, proximity: Swift.Int)
  public init(json: [Swift.String : Any])
  public func getId() -> Swift.Int64
  public func setId(id: Swift.Int64)
  public func getName() -> Swift.String
  public func setName(name: Swift.String)
  public func getProximity() -> Swift.Int
  public func setProximity(proximity: Swift.Int)
  @objc deinit
}
extension Swift.FloatingPoint {
  public var degreesToRadians: Self {
    get
  }
  public var radiansToDegrees: Self {
    get
  }
}
@_hasMissingDesignatedInitializers public class EndPoint {
  public static let initializeLooootManager: Swift.String
  public static let startSession: Swift.String
  public static let endSession: Swift.String
  public static let downloadTerms: Swift.String
  public static let faq: Swift.String
  public static let getCampaigns: Swift.String
  public static let redeemToken: Swift.String
  public static let getTokenTypeById: Swift.String
  public static let getTokenTypeByCampaign: Swift.String
  public static let claimToken: Swift.String
  public static let getTokensByLocation: Swift.String
  public static let getTokens: Swift.String
  public static let getWallet: Swift.String
  public static let getNextAd: Swift.String
  public static let adShown: Swift.String
  public static let adTapped: Swift.String
  public static let getLanguagesByClient: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class ExtendedItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public static let Identifier: Swift.String
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setData(extendedItemModel: Loooot.ExtendedItemModel)
  @_Concurrency.MainActor(unsafe) public func setViewBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setPictureBorderColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setPictureBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setSubtitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setMessageTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setArrowTintColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func hideArrow(isHidden: Swift.Bool)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class ARItem {
  public init(id: Swift.Int64, name: Swift.String, location: CoreLocation.CLLocationCoordinate2D, image: UIKit.UIImage?, groupId: Swift.Int64, campaignId: Swift.Int64)
  public func getId() -> Swift.Int64
  public func setId(id: Swift.Int64)
  public func getCampaignId() -> Swift.Int64
  public func setCampaignId(campaignId: Swift.Int64)
  public func getGroupId() -> Swift.Int64
  public func setGroupId(groupId: Swift.Int64)
  public func getName() -> Swift.String
  public func setName(name: Swift.String)
  public func getLocation() -> CoreLocation.CLLocationCoordinate2D
  public func setLocation(location: CoreLocation.CLLocationCoordinate2D)
  public func getImage() -> UIKit.UIImage?
  public func setImage(image: UIKit.UIImage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class DigiFidelSimpleItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public static let Identifier: Swift.String
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setData(simpleItemModel: Loooot.SimpleItemModel)
  @_Concurrency.MainActor(unsafe) public func setViewBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setPictureContainerBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRewardTypeTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setSubtitleTextColor(color: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func calculateNumberOfLines(text: Swift.String?) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SimpleItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public static let Identifier: Swift.String
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setData(simpleItemModel: Loooot.SimpleItemModel)
  @_Concurrency.MainActor(unsafe) public func setViewBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setPictureBorderColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setPictureBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setSubtitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setArrowTintColor(color: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol LNTouchDelegate : AnyObject {
  func locationNodeTouched(node: Loooot.AnnotationNode)
}
@available(iOS 11.0, *)
public protocol SceneLocationViewEstimateDelegate : AnyObject {
  func didAddSceneLocationEstimate(sceneLocationView: Loooot.SceneLocationView, position: SceneKit.SCNVector3, location: CoreLocation.CLLocation)
  func didRemoveSceneLocationEstimate(sceneLocationView: Loooot.SceneLocationView, position: SceneKit.SCNVector3, location: CoreLocation.CLLocation)
}
@available(iOS 11.0, *)
extension Loooot.SceneLocationViewEstimateDelegate {
  public func didAddSceneLocationEstimate(sceneLocationView: Loooot.SceneLocationView, position: SceneKit.SCNVector3, location: CoreLocation.CLLocation)
  public func didRemoveSceneLocationEstimate(sceneLocationView: Loooot.SceneLocationView, position: SceneKit.SCNVector3, location: CoreLocation.CLLocation)
}
@available(iOS 11.0, *)
public protocol SceneLocationViewDelegate : AnyObject {
  func didConfirmLocationOfNode(sceneLocationView: Loooot.SceneLocationView, node: Loooot.LocationNode)
  func didSetupSceneNode(sceneLocationView: Loooot.SceneLocationView, sceneNode: SceneKit.SCNNode)
  func didUpdateLocationAndScaleOfLocationNode(sceneLocationView: Loooot.SceneLocationView, locationNode: Loooot.LocationNode)
}
@available(iOS 11.0, *)
public protocol SceneTrackingDelegate : AnyObject {
  func sessionWasInterrupted(_ session: ARKit.ARSession)
  func sessionInterruptionEnded(_ session: ARKit.ARSession)
  func session(_ session: ARKit.ARSession, didFailWithError error: Swift.Error)
  func session(_ session: ARKit.ARSession, cameraDidChangeTrackingState camera: ARKit.ARCamera)
}
@available(iOS 11.0, *)
extension Loooot.SceneLocationViewDelegate {
  public func didAddSceneLocationEstimate(sceneLocationView: Loooot.SceneLocationView, position: SceneKit.SCNVector3, location: CoreLocation.CLLocation)
  public func didRemoveSceneLocationEstimate(sceneLocationView: Loooot.SceneLocationView, position: SceneKit.SCNVector3, location: CoreLocation.CLLocation)
  public func didConfirmLocationOfNode(sceneLocationView: Loooot.SceneLocationView, node: Loooot.LocationNode)
  public func didSetupSceneNode(sceneLocationView: Loooot.SceneLocationView, sceneNode: SceneKit.SCNNode)
  public func didUpdateLocationAndScaleOfLocationNode(sceneLocationView: Loooot.SceneLocationView, locationNode: Loooot.LocationNode)
}
public class MinifiedMapReward {
  public init(json: [Swift.String : Any])
  public func getId() -> Swift.Int64
  public func setId(id: Swift.Int64)
  public func getGroupId() -> Swift.Int64
  public func setGroupId(groupId: Swift.Int64)
  public func getLatitude() -> Swift.Double
  public func setLatitude(latitude: Swift.Double)
  public func getLongitude() -> Swift.Double
  public func setLongitude(longitude: Swift.Double)
  @objc deinit
}
public protocol RewardsTableViewDelegate {
  func onRewardClicked(rewardTypeId: Swift.Int64, rewardName: Swift.String, redeemType: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class RewardListView : UIKit.UIView, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) public var delegate: Loooot.RewardsTableViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func setTokens(tokens: Swift.Array<Loooot.RewardTypeList>!)
  @_Concurrency.MainActor(unsafe) public func getTokens() -> Swift.Array<Loooot.RewardTypeList>
  @_Concurrency.MainActor(unsafe) public func initTokenList(campaignId: Swift.Int64, campaignName: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setRewardsTableBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyRewardListTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyRewardListSuggestionTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setLoadingViewColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellPictureBorderColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellPictureBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellRewardTypeTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellSubtitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellArrowTintColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyListText(text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setEmptyListSuggestionText(text: Swift.String)
  @objc deinit
}
public class PermissionModel {
  public init(image: UIKit.UIImage, deniedImage: UIKit.UIImage?, message: Swift.String, details: Swift.String, deniedMesage: Swift.String?, deniedDetails: Swift.String?, buttonText: Swift.String)
  public func getImage() -> UIKit.UIImage
  public func setImage(image: UIKit.UIImage)
  public func getDeniedImage() -> UIKit.UIImage
  public func setDeniedImage(deniedImage: UIKit.UIImage)
  public func getMessage() -> Swift.String
  public func setMessage(message: Swift.String)
  public func getDetails() -> Swift.String
  public func setDetails(details: Swift.String)
  public func getDeniedMesage() -> Swift.String
  public func setDeniedMesage(deniedMesage: Swift.String)
  public func getDeniedDetails() -> Swift.String
  public func setDeniedDetails(deniedDetails: Swift.String)
  public func getButtonText() -> Swift.String
  public func setButtonText(buttonText: Swift.String)
  @objc deinit
}
public protocol HomeBarButtonDelegate {
  func onHomePressed()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CustomTabBar : UIKit.UITabBar {
  @_Concurrency.MainActor(unsafe) public var homeBarButtonDelegate: Loooot.HomeBarButtonDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, initialiseManually: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func disableTabsBesidesHome()
  @_Concurrency.MainActor(unsafe) public func getMapTabPosition() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func getWalletTabPosition() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func getCampaignsTabPosition() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func getFAQTabPosition() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func getMenuTabPosition() -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) public func onHomeClick()
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let rewardCollectedAR: Foundation.Notification.Name
  public static let rewardRedeemed: Foundation.Notification.Name
  public static let didUpdateLocation: Foundation.Notification.Name
  public static let showTurnOnLocationServiceAlert: Foundation.Notification.Name
  public static let removeCampaign: Foundation.Notification.Name
  public static let networkReachabilityChanged: Foundation.Notification.Name
}
extension UIKit.UIImage {
  public class func colorForShadowBar(color: UIKit.UIColor) -> UIKit.UIImage
  public class func createSelectionIndicator(color: UIKit.UIColor, size: CoreGraphics.CGSize, lineWidth: CoreGraphics.CGFloat) -> UIKit.UIImage
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class ErrorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func setImage(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func setMessage(message: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setViewBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setMessageTextColor(color: UIKit.UIColor)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class AdBannerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func setImageGestureRecognizer(gestureRecognizer: UIKit.UIGestureRecognizer)
  @_Concurrency.MainActor(unsafe) public func setCloseGestureRecognizer(gestureRecognizer: UIKit.UIGestureRecognizer)
  @_Concurrency.MainActor(unsafe) public func setAdImage(backgroundColor: Swift.String, imageUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setAdHiding(isHidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setCloseButtonHiding(isHidden: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class DigiFidelCampaignTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public static let Identifier: Swift.String
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setData(extendedItemModel: Loooot.ExtendedItemModel)
  @_Concurrency.MainActor(unsafe) public func setViewBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setSubtitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setMessageTextColor(color: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (Loooot.Reachability) -> ()
  public typealias NetworkUnreachable = (Loooot.Reachability) -> ()
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: Loooot.Reachability.Connection
    public static func == (a: Loooot.Reachability.Connection, b: Loooot.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: Loooot.Reachability.NetworkReachable?
  public var whenUnreachable: Loooot.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Loooot.Reachability.Connection {
    get
  }
  public var connection: Loooot.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Loooot.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension Loooot.SceneLocationEstimate {
  public func locationTranslation(to position: SceneKit.SCNVector3) -> Loooot.LocationTranslation
  public func translatedLocation(to position: SceneKit.SCNVector3) -> CoreLocation.CLLocation
}
@_hasMissingDesignatedInitializers public class GetAllRewardsModel {
  public func getPlayerId() -> Swift.Int64
  public func setPlayerId(playerId: Swift.Int64)
  public func getCampaignsIdList() -> Swift.Array<Swift.Int64>
  public func setCampaignsIdList(campaignsIdList: Swift.Array<Swift.Int64>)
  public func toJson() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LanguageIdentifier {
  public static let english: Swift.Int64
  public static let french: Swift.Int64
  public static let creole: Swift.Int64
  public static func checkIfLanguageIdentifierExists(_ languageIdentifier: Swift.Int64) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class CampaignTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public static let Identifier: Swift.String
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setData(extendedItemModel: Loooot.ExtendedItemModel)
  @_Concurrency.MainActor(unsafe) public func setViewBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setSubtitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setMessageTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setArrowTintColor(color: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol WalletViewDelegate {
  func onWalletItemClicked(walletItem: Loooot.WalletList)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class WalletView : UIKit.UIView, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate, Loooot.RewardDetailsDelegate {
  @_Concurrency.MainActor(unsafe) public var delegate: Loooot.WalletViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func removeRewardFromWallet(rewardIdToRemove: Swift.Int64)
  @_Concurrency.MainActor(unsafe) public func setWalletTokens(walletList: Swift.Array<Loooot.WalletList>!)
  @_Concurrency.MainActor(unsafe) public func getWalletTokens() -> Swift.Array<Loooot.RewardTypeList>
  @_Concurrency.MainActor(unsafe) public func setWalletBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyWalletTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyWalletSuggestionTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setLoadingViewColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellPictureBorderColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellPictureBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellRewardTypeTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellSubtitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellMessageTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellArrowTintColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyWalletText(text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setEmptyWalletSuggestionText(text: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ColorConstants {
  public static let closeAdBackground: Swift.Int
  public static let closeAdTint: Swift.Int
  public static let closeARBackground: Swift.Int
  public static let closeARTint: Swift.Int
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class AnnotationNode : SceneKit.SCNNode {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var id: Swift.Int64?
  @_Concurrency.MainActor(unsafe) public init(view: UIKit.UIView?, image: UIKit.UIImage?, id: Swift.Int64?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class LocationNode : SceneKit.SCNNode {
  @_Concurrency.MainActor(unsafe) public var location: CoreLocation.CLLocation!
  @_Concurrency.MainActor(unsafe) public var tag: Swift.String?
  @_Concurrency.MainActor(unsafe) public var locationConfirmed: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var continuallyAdjustNodePositionWhenWithinRange: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var continuallyUpdatePositionAndScale: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var scaleRelativeToDistance: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var ignoreAltitude: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var scalingScheme: Loooot.ScalingScheme
  @_Concurrency.MainActor(unsafe) public init(location: CoreLocation.CLLocation?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public class ClaimTokenSignalRModel {
  public init()
  public init(companyId: Swift.Int64, latitude: Swift.Double, longitude: Swift.Double, tokenId: Swift.Int64, groupId: Swift.Int64, campaignId: Swift.Int64)
  public func getCompanyId() -> Swift.Int64
  public func setCompanyId(companyId: Swift.Int64)
  public func getLatitude() -> Swift.Double
  public func setLatitude(latitude: Swift.Double)
  public func getLongitude() -> Swift.Double
  public func setLongitude(longitude: Swift.Double)
  public func getTokenId() -> Swift.Int64
  public func setTokenId(tokenId: Swift.Int64)
  public func getGroupId() -> Swift.Int64
  public func setGroupId(groupId: Swift.Int64)
  public func getCampaignId() -> Swift.Int64
  public func setCampaignId(campaignId: Swift.Int64)
  public func toJson() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SceneLocationEstimate {
  final public let location: CoreLocation.CLLocation
  final public let position: SceneKit.SCNVector3
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LocationManager : ObjectiveC.NSObject {
  public var heading: CoreLocation.CLLocationDirection? {
    get
  }
  public var headingAccuracy: CoreLocation.CLLocationDirection? {
    get
  }
  @objc deinit
}
extension Loooot.LocationManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateHeading newHeading: CoreLocation.CLHeading)
  @objc dynamic public func locationManagerShouldDisplayHeadingCalibration(_ manager: CoreLocation.CLLocationManager) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class Converter {
  public static func radiansToDegrees(_ radians: Swift.Double) -> Swift.Double
  public static func degreesToRadians(_ degrees: Swift.Double) -> Swift.Double
  public static func convertTimeZoneToUrlString(currentTime: Swift.String) -> Swift.String
  @objc deinit
}
extension Swift.Double {
  public var metersToLatitude: Swift.Double {
    get
  }
  public var metersToLongitude: Swift.Double {
    get
  }
}
extension Swift.Float {
  public var short: Swift.String {
    get
  }
}
extension Swift.Int {
  public var short: Swift.String {
    get
  }
  public var short3: Swift.String {
    get
  }
}
public class LanguageModel {
  public init()
  public init(id: Swift.Int64, name: Swift.String, iso2: Swift.String)
  public func getId() -> Swift.Int64
  public func setId(id: Swift.Int64)
  public func getName() -> Swift.String
  public func setName(name: Swift.String)
  public func getIso2() -> Swift.String
  public func setIso2(iso2: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WelcomeViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static let StoryboardName: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RewardListViewController : UIKit.UIViewController, Loooot.RewardsTableViewDelegate {
  @_Concurrency.MainActor(unsafe) public static let StoryboardName: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func onRewardClicked(rewardTypeId: Swift.Int64, rewardName: Swift.String, redeemType: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Dispatch.DispatchQueue {
  public static func background(delay: Swift.Double = 0.0, background: (() -> Swift.Void)? = nil, completion: (() -> Swift.Void)? = nil)
}
public enum LocationEstimateMethod {
  case coreLocationDataOnly
  case mostRelevantEstimate
  public static func == (a: Loooot.LocationEstimateMethod, b: Loooot.LocationEstimateMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SceneLocationManager {
  final public var locationEstimateMethod: Loooot.LocationEstimateMethod
  final public let locationManager: Loooot.LocationManager
  final public var bestLocationEstimate: Loooot.SceneLocationEstimate? {
    get
  }
  final public var currentLocation: CoreLocation.CLLocation? {
    get
  }
  @objc deinit
}
extension Loooot.SceneLocationManager {
  final public func run()
  final public func pause()
}
public typealias BoxBuilder = (_ distance: CoreGraphics.CGFloat) -> SceneKit.SCNBox
@objc @_Concurrency.MainActor(unsafe) public class PolylineNode : Loooot.LocationNode {
  @_Concurrency.MainActor(unsafe) public var locationNodes: [Loooot.LocationNode] {
    get
  }
  @_Concurrency.MainActor(unsafe) final public let polyline: MapKit.MKPolyline
  @_Concurrency.MainActor(unsafe) final public let altitude: CoreLocation.CLLocationDistance
  @_Concurrency.MainActor(unsafe) final public let boxBuilder: Loooot.BoxBuilder
  @_Concurrency.MainActor(unsafe) public init(polyline: MapKit.MKPolyline, altitude: CoreLocation.CLLocationDistance, boxBuilder: Loooot.BoxBuilder? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class LoadingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var layer: QuartzCore.CAShapeLayer {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) public var isScreenReady: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setStrokeColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class Campaign {
  public init()
  public init(id: Swift.Int64, name: Swift.String, proximity: Swift.Int, startDate: Foundation.Date, endDate: Foundation.Date, rewardsAvailable: Swift.Int)
  public init(json: [Swift.String : Any])
  public func getId() -> Swift.Int64
  public func setId(id: Swift.Int64)
  public func getName() -> Swift.String
  public func setName(name: Swift.String)
  public func getProximity() -> Swift.Int
  public func setProximity(proximity: Swift.Int)
  public func getStartDate() -> Foundation.Date
  public func setStartDate(startDate: Foundation.Date)
  public func getEndDate() -> Foundation.Date
  public func setEndDate(endDate: Foundation.Date)
  public func getRemainingRewards() -> Swift.Int
  public func setRemainingRewards(remainingRewards: Swift.Int)
  public func toExtendedItemModel() -> Loooot.ExtendedItemModel
  @objc deinit
}
public protocol CampaignListViewDelegate {
  func onCampaignClicked(campaign: Loooot.Campaign)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class CampaignListView : UIKit.UIView, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) public var delegate: Loooot.CampaignListViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func setCampaigns(campaings: Swift.Array<Loooot.Campaign>!)
  @_Concurrency.MainActor(unsafe) public func getCampaigns() -> Swift.Array<Loooot.Campaign>
  @_Concurrency.MainActor(unsafe) public func setCampaignsTableBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyCampaignListTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyCampaignListSuggestionTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setLoadingViewColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellSubtitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellMessageTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCellArrowTintColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setEmptyListText(text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setEmptyListSuggestionText(text: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LooootViewController : UIKit.UIViewController, UIKit.UITabBarDelegate, Loooot.HomeBarButtonDelegate {
  @_Concurrency.MainActor(unsafe) public static let StoryboardName: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func tabBar(_ tabBar: UIKit.UITabBar, didSelect item: UIKit.UITabBarItem)
  @_Concurrency.MainActor(unsafe) public func onHomePressed()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GetRewardsModel {
  public func getPlayerId() -> Swift.Int64
  public func setPlayerId(playerId: Swift.Int64)
  public func getLatitude() -> Swift.Double
  public func setLatitude(latitude: Swift.Double)
  public func getLongitude() -> Swift.Double
  public func setLongitude(longitude: Swift.Double)
  public func getCampaignsIdList() -> Swift.Array<Swift.Int64>
  public func setCampaignsIdList(campaignsIdList: Swift.Array<Swift.Int64>)
  public func getLatestUpdate() -> Swift.String
  public func setLatestUpdate(latestUpdate: Swift.String)
  public func getSessionId() -> Swift.Int64
  public func setSessionId(sessionId: Swift.Int64)
  public func toJson() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class GradientUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RewardClaimResponse {
  public init()
  public func getMessage() -> Swift.String?
  public func setMessage(message: Swift.String)
  public func getRuleLimitMessage() -> Swift.String?
  public func setRuleLimitMessage(ruleLimitMessage: Swift.String)
  public func getExpirationDate() -> Foundation.Date?
  public func setExpirationDate(expirationDate: Foundation.Date)
  public func getRedeemType() -> Swift.Int?
  public func setRedeemType(redeemType: Swift.Int)
  public func getQrContent() -> Swift.String?
  public func setQrContent(qrContent: Swift.String?)
  @objc deinit
}
public class ExtendedItemModel {
  public init(title: Swift.String!, subtitle: Swift.String!, description: Swift.String!, pictureUrl: Swift.String?)
  public init(title: Swift.String!, subtitle: Swift.String!, description: Swift.String!, pictureUrl: Swift.String?, rewardType: Swift.Int, qrContent: Swift.String?, expirationDate: Foundation.Date?)
  public func getTitle() -> Swift.String!
  public func setTitle(title: Swift.String)
  public func getSubtitle() -> Swift.String!
  public func setSubtitle(subtitle: Swift.String)
  public func getMessage() -> Swift.String!
  public func setMessage(message: Swift.String)
  public func getPictureUrl() -> Swift.String?
  public func setPictureUrl(pictureUrl: Swift.String?)
  public func getRewardType() -> Swift.Int?
  public func setRewardType(rewardType: Swift.Int)
  public func getQrContent() -> Swift.String?
  public func setQrContent(qrContent: Swift.String)
  public func getExpirationDate() -> Foundation.Date?
  public func setExpirationDate(expirationDate: Foundation.Date)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class PrimaryButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setButtonBackgroundColor(color: UIKit.UIColor)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GeofenceHelper {
  public static func getLatLongIdetifier(latitude: Swift.Double, longitude: Swift.Double) -> Swift.Int64
  public static func isPointInPolygon(minX: Swift.Double, maxX: Swift.Double, minY: Swift.Double, maxY: Swift.Double, xValue: Swift.Double, yValue: Swift.Double) -> Swift.Bool
  public static func getDistanceInMeters(lat1: Swift.Double, lon1: Swift.Double, lat2: Swift.Double, lon2: Swift.Double) -> Swift.Double
  public static func isInRange(lat1: Swift.Double, lon1: Swift.Double, lat2: Swift.Double, lon2: Swift.Double, radiusInMeters: Swift.Double) -> Swift.Bool
  public static func isInRange(lat1: Swift.Double, lon1: Swift.Double, lat2: Swift.Double, lon2: Swift.Double, radiusInMeters: Swift.Int) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SecondaryButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func setButtonBackgroundColor(color: UIKit.UIColor)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RedeemType {
  public static let instant: Swift.Int
  public static let wallet: Swift.Int
  public static let raffle: Swift.Int
  @objc deinit
}
public struct LocationTranslation {
  public var latitudeTranslation: Swift.Double
  public var longitudeTranslation: Swift.Double
  public var altitudeTranslation: Swift.Double
}
extension CoreLocation.CLLocation {
  convenience public init(coordinate: CoreLocation.CLLocationCoordinate2D, altitude: CoreLocation.CLLocationDistance)
  public func translation(toLocation location: CoreLocation.CLLocation) -> Loooot.LocationTranslation
  public func translatedLocation(with translation: Loooot.LocationTranslation) -> CoreLocation.CLLocation
  public func bearing(between point: CoreLocation.CLLocation) -> Swift.Double
}
extension CoreLocation.CLLocation {
  public var debugLog: Swift.String {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D {
  public func coordinateWithBearing(bearing: Swift.Double, distanceMeters: Swift.Double) -> CoreLocation.CLLocationCoordinate2D
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseMapView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static let defaultZoom: Swift.Float
  @_Concurrency.MainActor(unsafe) public static let maximumZoom: Swift.Float
  @_Concurrency.MainActor(unsafe) public static let minimumZoom: Swift.Float
  @_Concurrency.MainActor(unsafe) public static let defaultZoomIdiomPad: Swift.Float
  @_Concurrency.MainActor(unsafe) public static let minimumZoomIdiomPad: Swift.Float
  @_Concurrency.MainActor(unsafe) public static let defaultLocation: CoreLocation.CLLocation
  @_Concurrency.MainActor(unsafe) public static let defaultUserDistanceToMoveCamera: Swift.Int
  @_Concurrency.MainActor(unsafe) public var debugString: [Swift.String?]
  @_Concurrency.MainActor(unsafe) public var tokenSelected: Loooot.MapReward!
  @_Concurrency.MainActor(unsafe) public var currentZoomLevel: Swift.Float!
  @_Concurrency.MainActor(unsafe) public var allTokensList: Swift.Array<Loooot.MapReward>!
  @_Concurrency.MainActor(unsafe) public var mapTokensList: Swift.Array<Loooot.MapReward>!
  @_Concurrency.MainActor(unsafe) public var markerIconSize: CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) public var claimTokenBusy: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var latAtClaimedTime: Swift.Double?
  @_Concurrency.MainActor(unsafe) public var lngAtClaimedTime: Swift.Double?
  @_Concurrency.MainActor(unsafe) public var shouldMoveCameraToUserPosition: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var currentLatLongIdentifier: Swift.Int64!
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func getView() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func setView(newView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func baseInit()
  @_Concurrency.MainActor(unsafe) public func onMapTokenTapped(mapTokenSelected: Loooot.MapReward?, markerIcon: UIKit.UIImage?, markerPosition: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func onTokenCollected(tokenId: Swift.Int64, groupId: Swift.Int64, campaignId: Swift.Int64)
  @_Concurrency.MainActor(unsafe) open func onHomePressed()
  @_Concurrency.MainActor(unsafe) open func updateLatLongIdentifier(oldRoom: Swift.String, newRoom: Swift.String)
  @_Concurrency.MainActor(unsafe) open func removeMarker(mapReward: Loooot.MapReward)
  @_Concurrency.MainActor(unsafe) open func initLocalViews()
  @_Concurrency.MainActor(unsafe) open func changeMapFrame(size: CoreGraphics.CGSize)
  @_Concurrency.MainActor(unsafe) open func setTokenCollectedImage(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) open func animateMapView(zoomLevel: Swift.Float)
  @_Concurrency.MainActor(unsafe) open func whenAutoUpdateMap()
  @_Concurrency.MainActor(unsafe) open func claimTokenSignalR(claimTokenSignalRModel: Loooot.ClaimTokenSignalRModel)
  @_Concurrency.MainActor(unsafe) open func startSignalRService()
  @_Concurrency.MainActor(unsafe) open func stopSignalRService()
  @_Concurrency.MainActor(unsafe) open func onNetworkStatusChanged(isConnected: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func getErrorView() -> Loooot.ErrorView
  @_Concurrency.MainActor(unsafe) open func getLoadingView() -> Loooot.LoadingView
  @_Concurrency.MainActor(unsafe) open func getTokenCollectedView() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) open func getTokenCollectedRewardNameLabel() -> UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open func getConstraintTokenCollectedRewardNameTop() -> UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) open func getTokenCollectedDetailsLabel() -> UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open func getTokenCollectedImage() -> UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) open func getTokenCollectedButtonContainer() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) open func getConstraintTokenCollectedButtonContainerTop() -> UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) open func getConstraintTokenCollectedButtonContainerBottom() -> UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) open func getTokenCollectedButton() -> Loooot.PrimaryButton
  @_Concurrency.MainActor(unsafe) open func animateMapView(latitude: Swift.Double, longitude: Swift.Double, zoom: Swift.Float)
  @_Concurrency.MainActor(unsafe) open func getDebugTextLabel() -> UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open func getMapOverlay() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) open func getInfoDialogView() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) open func getInfoDialogTitleLabel() -> UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open func getConstraintInfoDialogTitleTop() -> UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) open func getInfoDialogMessageLabel() -> UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open func getInfoDialogButtonContainer() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) open func getConstraintInfoDialogButtonContainerTop() -> UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) open func getConstraintInfoDialogButtonContainerBottom() -> UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) open func getInfoDialogButton() -> Loooot.PrimaryButton
  @_Concurrency.MainActor(unsafe) public func getMarkerSize() -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) open func setMarkerSize(size: CoreGraphics.CGSize)
  @_Concurrency.MainActor(unsafe) public func setShouldSaveZoomLevel(shouldSaveZoomLevel: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func getTokensByLocation()
  @_Concurrency.MainActor(unsafe) open func claimToken()
  @_Concurrency.MainActor(unsafe) open func removeMapTokens(campaignId: Swift.Int64)
  @_Concurrency.MainActor(unsafe) open func drawPolygonOnMap(minX: Swift.Double, maxX: Swift.Double, minY: Swift.Double, maxY: Swift.Double)
  @_Concurrency.MainActor(unsafe) open func drawRooms()
  @_Concurrency.MainActor(unsafe) open func addMarkersOnCluster(mapTokens: Swift.Array<Loooot.MapReward>)
  @_Concurrency.MainActor(unsafe) open func onTokenClicked()
  @_Concurrency.MainActor(unsafe) public func getClosestMarkers(tokens: inout Swift.Array<Loooot.MapReward>, lat: Swift.Double, lng: Swift.Double) -> Swift.Array<Loooot.MapReward>
  @_Concurrency.MainActor(unsafe) public func setOverlayHidden(isHidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setTokenCollected(rewardName: Swift.String?, message: Swift.String, collectionRules: Swift.String, isError: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func refreshCampaigns()
  @_Concurrency.MainActor(unsafe) public func getProximity(getCampaignId: Swift.Int64) -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func refreshDebugString()
  @_Concurrency.MainActor(unsafe) open func onArItemCollected(reward: Loooot.MapReward?, arItem: Loooot.ARItem)
  @_Concurrency.MainActor(unsafe) public func onCloseTokenCollectedAction(tapGestureRecognizer: UIKit.UITapGestureRecognizer)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PermissionViewController : UIKit.UIViewController, CoreLocation.CLLocationManagerDelegate {
  @_Concurrency.MainActor(unsafe) public static let StoryboardName: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class StartSessionResponse {
  public init(sessionId: Swift.Int64!)
  public init(json: [Swift.String : Any])
  public func getSessionId() -> Swift.Int64
  public func setSessionId(sessionId: Swift.Int64)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ThemeManager {
  public static let shared: Loooot.ThemeManager
  public func setThemeColor(theme: Loooot.ThemeColor)
  public func setThemeImages(theme: Loooot.ThemeImages)
  public func getThemeImages() -> Loooot.ThemeImages
  public func getPrimaryColor() -> UIKit.UIColor
  public func getSecondaryColor() -> UIKit.UIColor
  public func getPrimaryTextColor() -> UIKit.UIColor
  public func getSecondaryTextColor() -> UIKit.UIColor
  public func getPrimaryBackgroundColor() -> UIKit.UIColor
  public func getCellBackgroundColor() -> UIKit.UIColor
  public func getPrimaryButtonBackgroundColor() -> UIKit.UIColor
  public func getPrimaryButtonTextColor() -> UIKit.UIColor
  public func getSecondaryButtonBackgroundColor() -> UIKit.UIColor
  public func getSecondaryButtonTextColor() -> UIKit.UIColor
  public func getDisabledColor() -> UIKit.UIColor
  public func getErrorColor() -> UIKit.UIColor
  public func getClusterColor() -> UIKit.UIColor
  public func getToolbarBackgroundColor() -> UIKit.UIColor
  public func getToolbarTextColor() -> UIKit.UIColor
  public func getToolbarBackColor() -> UIKit.UIColor
  public func getNavBarBackgroundColor() -> UIKit.UIColor
  public func getNavBarUnselectedColor() -> UIKit.UIColor
  public func getNavBarSelectedColor() -> UIKit.UIColor
  public func getCameraPermissionImage() -> UIKit.UIImage
  public func getCameraDeniedImage() -> UIKit.UIImage
  public func getLocationPermissionImage() -> UIKit.UIImage
  public func getLocationDeniedImage() -> UIKit.UIImage
  public func getNoInternetImage() -> UIKit.UIImage
  public func getImagePlaceholder() -> UIKit.UIImage
  public func getPinTabImage() -> UIKit.UIImage
  public func getFAQTabImage() -> UIKit.UIImage
  public func getCampaignTabImage() -> UIKit.UIImage
  public func getHomeTabImage() -> UIKit.UIImage
  public func getWalletTabImage() -> UIKit.UIImage
  public func getStartExperienceImage() -> UIKit.UIImage
  public func getEmptyCampaignImage() -> UIKit.UIImage
  public func getEmptyTokenListImage() -> UIKit.UIImage
  public func getEmptyWalletImage() -> UIKit.UIImage
  public func getBackIcon() -> UIKit.UIImage
  public func getMenuIcon() -> UIKit.UIImage
  public func getLogo() -> UIKit.UIImage
  public func getMapTypeMapViewImage() -> UIKit.UIImage
  public func getMapTypeSatelliteViewImage() -> UIKit.UIImage
  @objc deinit
}
public class ClaimRewardModel {
  public init()
  public init(clientId: Swift.Int64, rewardId: Swift.Int64, userId: Swift.Int64, campaignId: Swift.Int64, playerLatitude: Swift.Double, playerLongitude: Swift.Double, rewardLatitude: Swift.Double, rewardLongitude: Swift.Double, claimedAt: Swift.String, campaignProximity: Swift.Int, tokenTypeId: Swift.Int64, sessionId: Swift.Int64, groupId: Swift.Int64)
  public func getClientId() -> Swift.Int64
  public func setClientId(clientId: Swift.Int64)
  public func getRewardId() -> Swift.Int64
  public func setRewardId(rewardId: Swift.Int64)
  public func getUserId() -> Swift.Int64
  public func setUserId(userId: Swift.Int64)
  public func getCampaignId() -> Swift.Int64
  public func setCampaignId(campaignId: Swift.Int64)
  public func getPlayerLatitude() -> Swift.Double
  public func setPlayerLatitude(playerLatitude: Swift.Double)
  public func getPlayerLongitude() -> Swift.Double
  public func setPlayerLongitude(playerLongitude: Swift.Double)
  public func getRewardLatitude() -> Swift.Double
  public func setRewardLatitude(rewardLatitude: Swift.Double)
  public func getRewardLongitude() -> Swift.Double
  public func setRewardLongitude(rewardLongitude: Swift.Double)
  public func getClaimedAt() -> Swift.String
  public func setClaimedAt(claimedAt: Swift.String)
  public func getCampaignProximity() -> Swift.Int
  public func setCampaignProximity(campaignProximity: Swift.Int)
  public func toJson() -> Swift.String
  @objc deinit
}
public class ThemeColor {
  public init()
  public init(primaryColor: UIKit.UIColor, secondaryColor: UIKit.UIColor, primaryTextColor: UIKit.UIColor, secondaryTextColor: UIKit.UIColor, primaryBackgroundColor: UIKit.UIColor, cellBackgroundColor: UIKit.UIColor, primaryButtonBackgroundColor: UIKit.UIColor, primaryButtonTextColor: UIKit.UIColor, secondaryButtonBackgroundColor: UIKit.UIColor, secondaryButtonTextColor: UIKit.UIColor, disabledColor: UIKit.UIColor, errorColor: UIKit.UIColor, clusterColor: UIKit.UIColor, toolbarBackgroundColor: UIKit.UIColor, toolbarTextColor: UIKit.UIColor, toolbarBackColor: UIKit.UIColor, navBarBackgroundColor: UIKit.UIColor, navBarUnselectedColor: UIKit.UIColor, navBarSelectedColor: UIKit.UIColor)
  public func getPrimaryColor() -> UIKit.UIColor
  public func setPrimaryColor(color: UIKit.UIColor)
  public func getSecondaryColor() -> UIKit.UIColor
  public func setSecondaryColor(color: UIKit.UIColor)
  public func getPrimaryTextColor() -> UIKit.UIColor
  public func setPrimaryTextColor(color: UIKit.UIColor)
  public func getSecondaryTextColor() -> UIKit.UIColor
  public func setSecondaryTextColor(color: UIKit.UIColor)
  public func getPrimaryBackgroundColor() -> UIKit.UIColor
  public func setPrimaryBackgroundColor(color: UIKit.UIColor)
  public func getCellBackgroundColor() -> UIKit.UIColor
  public func setCellBackgroundColor(color: UIKit.UIColor)
  public func getPrimaryButtonBackgroundColor() -> UIKit.UIColor
  public func setPrimaryButtonBackgroundColor(color: UIKit.UIColor)
  public func getPrimaryButtonTextColor() -> UIKit.UIColor
  public func setPrimaryButtonTextColor(color: UIKit.UIColor)
  public func getSecondaryButtonBackgroundColor() -> UIKit.UIColor
  public func setSecondaryButtonBackgroundColor(color: UIKit.UIColor)
  public func getSecondaryButtonTextColor() -> UIKit.UIColor
  public func setSecondaryButtonTextColor(color: UIKit.UIColor)
  public func getDisabledColor() -> UIKit.UIColor
  public func setDisabledColor(color: UIKit.UIColor)
  public func getErrorColor() -> UIKit.UIColor
  public func setErrorColor(color: UIKit.UIColor)
  public func getClusterColor() -> UIKit.UIColor
  public func setClusterColor(color: UIKit.UIColor)
  public func getToolbarBackgroundColor() -> UIKit.UIColor
  public func setToolbarBackgroundColor(color: UIKit.UIColor)
  public func getToolbarTextColor() -> UIKit.UIColor
  public func setToolbarTextColor(color: UIKit.UIColor)
  public func getToolbarBackColor() -> UIKit.UIColor
  public func setToolbarBackColor(color: UIKit.UIColor)
  public func getNavBarBackgroundColor() -> UIKit.UIColor
  public func setNavBarBackgroundColor(color: UIKit.UIColor)
  public func getNavBarUnselectedColor() -> UIKit.UIColor
  public func setNavBarUnselectedColor(color: UIKit.UIColor)
  public func getNavBarSelectedColor() -> UIKit.UIColor
  public func setNavBarSelectedColor(color: UIKit.UIColor)
  @objc deinit
}
public protocol ProtoHttpManagerDelegate {
  static var shared: Loooot.ProtoHttpManagerDelegate! { get }
  func getTermsAndConditionsUrl() -> Swift.String
  func getFAQUrl() -> Swift.String
  func getLanguagesByClient(completion: @escaping (_ data: Swift.Array<Loooot.LanguageModel>?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func getLanguagesByClient(clientId: Loooot.LooootClientIdEnum, completion: @escaping (_ data: Swift.Array<Loooot.LanguageModel>?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func setTermsAndConditionsUrl(url: Swift.String)
  func resetTermsAndConditionsAndFAQUrl()
  func initializeLooootManager(playerIdentifier: Swift.String, clientId: Swift.Int64, completion: @escaping (_ data: Loooot.InitResponse?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func startSession(currentTime: Swift.String, completion: @escaping (_ data: Loooot.StartSessionResponse?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func endSession(currentTime: Swift.String)
  func getCampaigns(completion: @escaping (_ data: Swift.Array<Loooot.Campaign>?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func getTokensMinifiedList(campaignId: Swift.Int64, completion: @escaping (_ data: Swift.Array<Loooot.RewardTypeList>?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func getTokensByLocation(completion: @escaping (_ data: Swift.Array<Loooot.MapReward>?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func getAllTokens(completion: @escaping (_ data: Swift.Array<Loooot.RewardTypeList>?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func getTokenTypeById(tokenTypeId: Swift.Int64, completion: @escaping (_ data: Loooot.RewardTypeDetails?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func claimToken(reward: Loooot.MapReward, proximity: Swift.Int, claimedAt: Swift.String, lat: Swift.Double, lng: Swift.Double, completion: @escaping (_ data: Loooot.WebResponse<Loooot.RewardClaimResponse>?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func redeemToken(tokenId: Swift.Int64, redeemedAt: Swift.String, completion: @escaping (_ data: Loooot.RewardTypeDetails?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func getWallet(completion: @escaping (_ data: Swift.Array<Loooot.WalletList>?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func getNextAd(adImageId: Swift.Int64, completion: @escaping (_ data: Loooot.Ad?, _ isSuccessful: Swift.Bool) -> Swift.Void)
  func adShown(adDisplayedModel: Loooot.AdDisplayedModel)
  func adTapped(adDisplayedModel: Loooot.AdDisplayedModel)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TermsAndConditionsViewController : UIKit.UIViewController, UIKit.UIWebViewDelegate {
  @_Concurrency.MainActor(unsafe) public static let StoryboardName: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func webViewDidFinishLoad(_ webView: UIKit.UIWebView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MenuDelegate {
  func getMenuViewController() -> UIKit.UIViewController?
  func onMenuOpened()
  func onMenuClosed()
}
public protocol MenuTabBarDelegate {
  func getMenuViewController() -> UIKit.UIViewController?
}
public protocol MenuActionDelegate {
  func dismissMenu()
}
public protocol HomeDelegate {
  func onHomePressed()
}
public protocol LooootManagerDelegate {
  static var shared: Loooot.LooootManagerDelegate! { get }
}
open class BaseLooootManager {
  public static let sharedInstance: Loooot.BaseLooootManager
  public static let googleMapsApiKey: Swift.String
  public var menuDelegate: Loooot.MenuDelegate?
  public var menuTabBarDelegate: Loooot.MenuTabBarDelegate?
  public var menuActionDelegate: Loooot.MenuActionDelegate?
  public var homeDelegate: Loooot.HomeDelegate?
  public var mapViewDelegate: Loooot.MapViewDelegate?
  public var protoHttpManagerDelegate: Loooot.ProtoHttpManagerDelegate?
  public init()
  public static func initialize(playerIdentifier: Swift.String, clientId: Swift.Int64, completion: @escaping (_ isSuccessful: Swift.Bool) -> Swift.Void)
  public func getBundle() -> Foundation.Bundle
  public func getProtoHttpClient() -> Loooot.ProtoHttpManagerDelegate
  public func getTranslationManager() -> Loooot.TranslationManager
  public func getFontHelper() -> Loooot.FontHelper
  public func startLoooot(viewController: UIKit.UIViewController, playerIdentifier: Swift.String)
  public func startLoooot(viewController: UIKit.UIViewController, playerIdentifier: Swift.String, clientId: Loooot.LooootClientIdEnum)
  public func endSession()
  public func getPlayerIdentifier() -> Swift.String
  public func setPlayerIdentifier(playerIdentifier: Swift.String)
  public func getPlayerId() -> Swift.Int64
  public func setPlayerId(playerId: Swift.Int64)
  public func getClientId() -> Swift.Int64
  public func setClientId(clientId: Swift.Int64)
  public func getSessionId() -> Swift.Int64?
  public func setSessionId(sessionId: Swift.Int64)
  public func getCampaignMinifiedList() -> Swift.Array<Loooot.CampaignMinified>
  public func setCampaignMinifiedList(campaignMinifiedList: Swift.Array<Loooot.CampaignMinified>)
  public func getCurrentLatitude() -> Swift.Double?
  public func setCurrentLatitude(currentLatitude: Swift.Double)
  public func getCurrentLongitude() -> Swift.Double?
  public func setCurrentLongitude(currentLongitude: Swift.Double)
  public func setTermsAndConditionsUrl(url: Swift.String)
  public func isDebugMode() -> Swift.Bool
  public func getOffsetXGetMarkers() -> Swift.Int
  public func getOffsetYGetMarkers() -> Swift.Int
  public func getMaxTokensDisplayed() -> Swift.Int
  public func getDefaultTimeUpdate() -> Swift.Int
  public func getShouldGetTokensAfterClaim() -> Swift.Bool
  public func isDisableAR() -> Swift.Bool
  public func setDisableAR(disableAR: Swift.Bool)
  public func getSignalRUrl() -> Swift.String
  public func setSignalRUrl(signalRUrl: Swift.String)
  public func getTermsAndConditionsUrl() -> Swift.String
  public func getFAQUrl() -> Swift.String
  public func getCampaignIdList() -> Swift.Array<Swift.Int64>
  public func dismissMenu()
  public func getCurrentLanguageId() -> Swift.Int64
  public func resetLooootManagerData()
  @objc deinit
}
public class RewardTypeDetails {
  public init()
  public init(id: Swift.Int64?, whitelabelId: Swift.Int64?, name: Swift.String?, name2: Swift.String?, message: Swift.String?, imageUrl: Swift.String?, redeemType: Swift.Int?, redemptionRules: Swift.String?, promotionImageUrl: Swift.String?, qrContent: Swift.String?, status: Swift.Int?)
  public init(json: [Swift.String : Any])
  public func getId() -> Swift.Int64?
  public func setId(id: Swift.Int64?)
  public func getWhitelabelId() -> Swift.Int64?
  public func setWhitelabelId(whitelabelId: Swift.Int64?)
  public func getName() -> Swift.String?
  public func setName(name: Swift.String?)
  public func getName2() -> Swift.String?
  public func setName2(name2: Swift.String?)
  public func getMessage() -> Swift.String?
  public func setMessage(message: Swift.String?)
  public func getImageUrl() -> Swift.String?
  public func setImageUrl(imageUrl: Swift.String?)
  public func getRedeemType() -> Swift.Int?
  public func setRedeemType(redeemType: Swift.Int?)
  public func getRedemptionRules() -> Swift.String?
  public func setRedemptionRules(redemptionRules: Swift.String?)
  public func getPromotionImageUrl() -> Swift.String?
  public func setPromotionImageUrl(promotionImageUrl: Swift.String?)
  public func getQrContent() -> Swift.String?
  public func setQrContent(qrContent: Swift.String?)
  public func getStatus() -> Swift.Int?
  public func setStatus(status: Swift.Int?)
  public func getFullName() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NotificationCenterDataConstants {
  public static let newLocationKey: Swift.String
  public static let newHeadingKey: Swift.String
  public static let arItemKey: Swift.String
  public static let rewardRedeemKey: Swift.String
  public static let removeCampaign: Swift.String
  @objc deinit
}
public class RewardTypeList {
  public init()
  public init(id: Swift.Int64, name: Swift.String, name2: Swift.String?, campaignNames: Swift.Array<Swift.String>?, rewardImageUrl: Swift.String, rewardType: Swift.Int)
  public init(json: [Swift.String : Any])
  public func getId() -> Swift.Int64
  public func setId(id: Swift.Int64)
  public func getCampaignNames() -> Swift.Array<Swift.String>?
  public func setCampaignNames(campaignNames: Swift.Array<Swift.String>?)
  public func getName() -> Swift.String
  public func setName(name: Swift.String)
  public func getName2() -> Swift.String?
  public func setName2(name2: Swift.String)
  public func getRewardImageUrl() -> Swift.String
  public func setRewardImageUrl(rewardImageUrl: Swift.String)
  public func getRewardType() -> Swift.Int
  public func setRewardType(rewardType: Swift.Int)
  public func toSimpleItemModel() -> Swift.Array<Loooot.SimpleItemModel>
  public func toSimpleItemModelWithRewardType() -> Swift.Array<Loooot.SimpleItemModel>
  public func toSimpleItemModel(campaignName: Swift.String) -> Loooot.SimpleItemModel
  public func toSimpleItemModelWithRewardType(campaignName: Swift.String) -> Loooot.SimpleItemModel
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FontHelper {
  public static let shared: Loooot.FontHelper
  public func initSemiboldFont(fontName: Swift.String) -> Loooot.FontHelper
  public func initBoldFont(fontName: Swift.String) -> Loooot.FontHelper
  public func initTitleFont(fontName: Swift.String) -> Loooot.FontHelper
  public func getSemiboldFont(ofSize: CoreGraphics.CGFloat) -> UIKit.UIFont?
  public func getBoldFont(ofSize: CoreGraphics.CGFloat) -> UIKit.UIFont?
  public func getTitleFont(ofSize: CoreGraphics.CGFloat) -> UIKit.UIFont?
  public func setSemiboldFont(label: UIKit.UILabel?, ofSize: CoreGraphics.CGFloat)
  public func setSemiboldFont(button: UIKit.UIButton?, ofSize: CoreGraphics.CGFloat)
  public func setBoldFont(label: UIKit.UILabel?, ofSize: CoreGraphics.CGFloat)
  public func setBoldFont(button: UIKit.UIButton?, ofSize: CoreGraphics.CGFloat)
  public func setTitleFont(label: UIKit.UILabel?, ofSize: CoreGraphics.CGFloat)
  public func getTabBarFont() -> UIKit.UIFont
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class LocationAnnotationNode : Loooot.LocationNode {
  @_Concurrency.MainActor(unsafe) final public let annotationNode: Loooot.AnnotationNode
  @_Concurrency.MainActor(unsafe) public init(location: CoreLocation.CLLocation?, image: UIKit.UIImage, id: Swift.Int64?)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) convenience public init(location: CoreLocation.CLLocation?, view: UIKit.UIView, id: Swift.Int64?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIView {
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage {
    get
  }
}
public class Ad {
  public init()
  public init(adId: Swift.Int64, imageId: Swift.Int64, imageUrl: Swift.String, type: Swift.Int, redirectLink: Swift.String?, displayTime: Swift.Int, showTime: Swift.Int, backgroundColor: Swift.String!)
  public init(json: [Swift.String : Any])
  public func getAdId() -> Swift.Int64
  public func setAdId(adId: Swift.Int64)
  public func getImageId() -> Swift.Int64
  public func setImageId(imageId: Swift.Int64)
  public func getImageUrl() -> Swift.String
  public func setImageUrl(imageUrl: Swift.String)
  public func getType() -> Swift.Int
  public func setType(type: Swift.Int)
  public func getRedirectLink() -> Swift.String?
  public func setRedirectLink(redirectLink: Swift.String)
  public func getDisplayTime() -> Swift.Int
  public func setDisplayTime(displayTime: Swift.Int)
  public func getShowTime() -> Swift.Int
  public func setShowTime(showTime: Swift.Int)
  public func getBackgroundColor() -> Swift.String
  public func setBackgroundColor(backgroundColor: Swift.String)
  @objc deinit
}
extension UIKit.UINavigationBar {
  @_Concurrency.MainActor(unsafe) public func setUpNavigationBarWithTitle(title: Swift.String = "")
  @_Concurrency.MainActor(unsafe) public func setUpNavigationBarWithLogo()
  @_Concurrency.MainActor(unsafe) public func setUpNavigationBarWithMenuButtonAndTitle(title: Swift.String = "")
  @_Concurrency.MainActor(unsafe) public func setUpNavigationBarWithMenuButtonAndLogo()
  @_Concurrency.MainActor(unsafe) public func setUpNavigationBarWithBackButtonAndTitle(title: Swift.String = "")
  @_Concurrency.MainActor(unsafe) public func setUpNavigationBarWithBackButtonAndLogo()
}
@objc @_inheritsConvenienceInitializers public class MapReward : ObjectiveC.NSObject {
  public var position: CoreLocation.CLLocationCoordinate2D
  @objc override dynamic public init()
  public init(id: Swift.Int64, groupId: Swift.Int64, campaignId: Swift.Int64, rewardTypeId: Swift.Int64, latitude: Swift.Double, longitude: Swift.Double, name: Swift.String, name2: Swift.String?, imageUrl: Swift.String)
  public init(json: [Swift.String : Any])
  public func getId() -> Swift.Int64
  public func setId(id: Swift.Int64)
  public func getGroupId() -> Swift.Int64
  public func setGroupId(groupId: Swift.Int64)
  public func getCampaignId() -> Swift.Int64
  public func setCampaignId(campaignId: Swift.Int64)
  public func getRewardTypeId() -> Swift.Int64
  public func setRewardTypeId(rewardTypeId: Swift.Int64)
  public func getLatitude() -> Swift.Double
  public func setLatitude(latitude: Swift.Double)
  public func getLongitude() -> Swift.Double
  public func setLongitude(longitude: Swift.Double)
  public func getName() -> Swift.String
  public func setName(name: Swift.String)
  public func getName2() -> Swift.String?
  public func setName2(name2: Swift.String)
  public func getImageUrl() -> Swift.String
  public func setImageUrl(imageUrl: Swift.String)
  public func getFullName() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResponseHelper {
  public static let responseCodeDictionary: [Swift.Int : Swift.String]
  public static func getMessage(responseCode: Swift.Int) -> Swift.String
  @objc deinit
}
public class WebResponse<T> {
  public init()
  public init(data: T, success: Swift.Bool, statusCode: Swift.Int)
  public func getData() -> T
  public func setData(data: T)
  public func getSuccess() -> Swift.Bool
  public func setSuccess(success: Swift.Bool)
  public func getStatusCode() -> Swift.Int
  public func setStatusCode(statusCode: Swift.Int)
  public func isSuccessful() -> Swift.Bool
  @objc deinit
}
public protocol AdManagerDelegate {
  func onAdShown(ad: Loooot.Ad)
  func onAdClicked(ad: Loooot.Ad)
  func onAdClosed(ad: Loooot.Ad)
}
@_hasMissingDesignatedInitializers public class AdManager {
  public static let shared: Loooot.AdManager
  public func addDelegate(delegate: Loooot.AdManagerDelegate)
  public func shouldShowInterstitial(shouldShowInterstitial: Swift.Bool)
  public func onInterstitialClicked()
  public func onInterstitialClosed()
  public func setViewForBanner(bannerView: Loooot.AdBannerView, viewHeightConstraint: UIKit.NSLayoutConstraint)
  public func startTimer()
  public func stopTimer()
  @objc deinit
}
public protocol MapViewDelegate {
  func GetMapView() -> Loooot.BaseMapView
}
@_hasMissingDesignatedInitializers public class AdDisplayedModel {
  public func getPlayerId() -> Swift.Int64
  public func setPlayerId(playerId: Swift.Int64)
  public func getAdId() -> Swift.Int64
  public func setAdId(adId: Swift.Int64)
  public func getCurrentISOTime() -> Swift.String
  public func setCurrentISOTime(currentISOTime: Swift.String)
  public func toJson() -> Swift.String
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func presentFromBundle<T>(viewControllerType: T.Type, storyboardName: Swift.String, bundle: Foundation.Bundle) where T : UIKit.UIViewController
}
public class SimpleItemModel {
  public init(title: Swift.String, subtitle: Swift.String, pictureUrl: Swift.String)
  public init(title: Swift.String, subtitle: Swift.String, pictureUrl: Swift.String, rewardType: Swift.Int)
  public func getTitle() -> Swift.String!
  public func setTitle(title: Swift.String)
  public func getSubtitle() -> Swift.String!
  public func setSubtitle(subtitle: Swift.String)
  public func getPictureUrl() -> Swift.String!
  public func setPictureUrl(pictureUrl: Swift.String)
  public func getRewardType() -> Swift.Int?
  public func setRewardType(rewardType: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TranslationConstants {
  public static let login: Swift.String
  public static let appName: Swift.String
  public static let campaignListViewNoItems: Swift.String
  public static let campaignListViewYourCampaigns: Swift.String
  public static let campaignListViewNoItemsSuggestion: Swift.String
  public static let redeemTokenDialogTitle: Swift.String
  public static let redeemTokenDialogAlert: Swift.String
  public static let redeemTokenDialogMessage: Swift.String
  public static let redeemTokenDialogDecline: Swift.String
  public static let redeemTokenDialogConfirm: Swift.String
  public static let couponDetailsViewTicketNumber: Swift.String
  public static let couponDetailsViewRedemptionRules: Swift.String
  public static let couponDetailsViewRaffleDate: Swift.String
  public static let mapViewTooFarToCollectTokenTitle: Swift.String
  public static let mapViewTooFarToCollectTokenMessage: Swift.String
  public static let mapViewConfirm: Swift.String
  public static let mapViewFailedToCollectToken: Swift.String
  public static let rewardListViewNoRewardsText: Swift.String
  public static let rewardListViewNoRewardsSuggestionText: Swift.String
  public static let rewardListViewYourPrizes: Swift.String
  public static let rewardListButtonText: Swift.String
  public static let walletViewEmptyText: Swift.String
  public static let walletViewExpiresText: Swift.String
  public static let walletViewEmptySuggestionText: Swift.String
  public static let walletViewYourAvailableCoupons: Swift.String
  public static let looootViewControllerMap: Swift.String
  public static let looootViewControllerWallet: Swift.String
  public static let looootViewControllerHome: Swift.String
  public static let looootViewControllerCampaigns: Swift.String
  public static let looootViewControllerFAQ: Swift.String
  public static let looootViewControllerMenu: Swift.String
  public static let couponDetailsViewRedeemButton: Swift.String
  public static let couponDetailsViewTokenTitle: Swift.String
  public static let couponDetailsViewCouponTitle: Swift.String
  public static let couponDetailsViewRaffleTitle: Swift.String
  public static let couponDetailsViewRaffleTicketTitle: Swift.String
  public static let noInternetWarning: Swift.String
  public static let cameraPermissionDenied: Swift.String
  public static let accessLocationPermissionDenied: Swift.String
  public static let locationServiceDisabled: Swift.String
  public static let rewardsLeftToCollectSingle: Swift.String
  public static let rewardsLeftToCollectPlural: Swift.String
  public static let error: Swift.String
  public static let errorFailedToInitializeLoooot: Swift.String
  public static let errorTokenAlreadyClaimed: Swift.String
  public static let welcomeButton: Swift.String
  public static let returnToMainApp: Swift.String
  public static let welcomeMessage: Swift.String
  public static let termsAndConditionsTitle: Swift.String
  public static let termsAndConditionsDenyButton: Swift.String
  public static let termsAndConditionsAcceptButton: Swift.String
  public static let permissionWelcomeMessage: Swift.String
  public static let permissionWelcomeDetails: Swift.String
  public static let permissionWelcomeButton: Swift.String
  public static let permissionCameraMessage: Swift.String
  public static let permissionCameraDetails: Swift.String
  public static let permissionCameraDeniedMessage: Swift.String
  public static let permissionCameraDeniedDetails: Swift.String
  public static let permissionCameraButton: Swift.String
  public static let permissionLocationMessage: Swift.String
  public static let permissionLocationDetails: Swift.String
  public static let permissionLocationDeniedMessage: Swift.String
  public static let permissionLocationDeniedDetails: Swift.String
  public static let permissionLocationButton: Swift.String
  public static let permissionDeniedButton: Swift.String
  public static let moreDetails: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageCacher {
  public static let shared: Loooot.ImageCacher
  public func addToDictionary(imageUrl: Swift.String, image: UIKit.UIImage)
  public func addToMapDictionary(imageUrl: Swift.String, image: UIKit.UIImage)
  public func removeFromDictionary(imageUrl: Swift.String)
  public func removeFromMapDictionary(imageUrl: Swift.String)
  public func getFromDictionary(imageUrl: Swift.String) -> UIKit.UIImage?
  public func getFromMapDictionary(imageUrl: Swift.String) -> UIKit.UIImage?
  public func containsUrl(imageUrl: Swift.String) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringConstants {
  public static let ISODateFormat: Swift.String
  public static let jsonDateFormat: Swift.String
  public static let dateFormat: Swift.String
  public static let campaignDatePeriod: Swift.String
  public static func getRewardsLeft(number: Swift.Int) -> Swift.String
  public static let userId: Swift.String
  public static let playerId: Swift.String
  public static let clientId: Swift.String
  public static let playerIdentifier: Swift.String
  public static let latitude: Swift.String
  public static let longitude: Swift.String
  public static let campaignId: Swift.String
  public static let tokenTypeId: Swift.String
  public static let tokenId: Swift.String
  public static let lastAdImageId: Swift.String
  public static let claimedAt: Swift.String
  public static let currentTime: Swift.String
  public static let redeemedAt: Swift.String
  public static let sessionId: Swift.String
  public static let languageId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PermissionModelHelper {
  public static func getWelcome() -> Loooot.PermissionModel
  public static func getCameraPermission() -> Loooot.PermissionModel
  public static func getLocationPermission() -> Loooot.PermissionModel
  @objc deinit
}
public class WalletList : Loooot.RewardTypeList {
  public init(id: Swift.Int64, name: Swift.String, name2: Swift.String?, rewardImageUrl: Swift.String, rewardType: Swift.Int, mapRewardId: Swift.Int64, expirationDate: Foundation.Date?, campaignName: Swift.String, qrContent: Swift.String?)
  override public init(json: [Swift.String : Any])
  public func getMapRewardId() -> Swift.Int64?
  public func setMapRewardId(mapRewardId: Swift.Int64)
  public func getExpirationDate() -> Foundation.Date?
  public func setExpirationDate(expirationDate: Foundation.Date)
  public func getCampaignName() -> Swift.String
  public func setCampaignName(campaignName: Swift.String)
  public func getQrContent() -> Swift.String?
  public func setQrContent(qrContent: Swift.String?)
  public func toExtendedItemModel() -> Loooot.ExtendedItemModel
  @objc deinit
}
public enum LooootClientIdEnum : Swift.Int64 {
  case rubyGoHaiti
  case rubyGoJamaica
  case rubyGoTrinidadAndTobago
  case rubyGoStLucia
  public static var `default`: Loooot.LooootClientIdEnum {
    get
  }
  public init?(rawValue: Swift.Int64)
  public typealias RawValue = Swift.Int64
  public var rawValue: Swift.Int64 {
    get
  }
}
@_hasMissingDesignatedInitializers public class TranslationManager {
  public static let shared: Loooot.TranslationManager
  public func initTranslations()
  public func resetTranslations()
  public func setCurrentLanguageIdentifier(languageIdentifier: Swift.Int64)
  public func getCurrentLanguageIdentifier() -> Swift.Int64
  public func getTranslation(key: Swift.String) -> Swift.String
  public func setAppNameText(text: Swift.String)
  public func setCampaignListViewNoItemsText(text: Swift.String)
  public func setCampaignListViewNoItemsSuggestionText(text: Swift.String)
  public func setCouponDetailsViewTicketNumberText(text: Swift.String)
  public func setCouponDetailsViewRedemptionRulesText(text: Swift.String)
  public func setCouponDetailsViewRaffleDateText(text: Swift.String)
  public func setCouponDetailsViewRedeemButtonText(text: Swift.String)
  public func setCouponDetailsRewardsLeftSingleText(text: Swift.String)
  public func setCouponDetailsRewardsLeftPluralText(text: Swift.String)
  public func setCouponDetailsViewTokenTitleText(text: Swift.String)
  public func setCouponDetailsViewCouponTitleText(text: Swift.String)
  public func setCouponDetailsViewRaffleTitleText(text: Swift.String)
  public func setCouponDetailsViewRaffleTicketTitleText(text: Swift.String)
  public func setNoInternetWarningText(text: Swift.String)
  public func setCameraPermissionDeniedText(text: Swift.String)
  public func setAccessLocationPermissionDeniedText(text: Swift.String)
  public func setLocationServiceDisabledText(text: Swift.String)
  public func setMapViewTooFarToCollectTokenTitleText(text: Swift.String)
  public func setMapViewTooFarToCollectTokenMessageText(text: Swift.String)
  public func setMapViewConfirmText(text: Swift.String)
  public func setMapViewFailedToCollectTokenText(text: Swift.String)
  public func setRewardListViewNoRewardText(text: Swift.String)
  public func setRewardListViewNoRewardSuggestionText(text: Swift.String)
  public func setWalletViewEmptyText(text: Swift.String)
  public func setWalletViewEmptySuggestionText(text: Swift.String)
  public func setWalletViewExpiresText(text: Swift.String)
  public func setRedeemTokenDialogTitleText(text: Swift.String)
  public func setRedeemtokenDialogAlertText(text: Swift.String)
  public func setRedeemtokenDialogMessageText(text: Swift.String)
  public func setRedeemtokenDialogDeclineText(text: Swift.String)
  public func setRedeemTokenDialogConfirmText(text: Swift.String)
  public func setLooootViewControllerMapText(text: Swift.String)
  public func setLooootViewControllerWalletText(text: Swift.String)
  public func setLooootViewControllerHomeText(text: Swift.String)
  public func setLooootViewControllerCampaignsText(text: Swift.String)
  public func setLooootViewControllerFAQText(text: Swift.String)
  public func setLooootViewControllerMenuText(text: Swift.String)
  public func setErrorText(text: Swift.String)
  public func setErrorFailedToInitializeLooootText(text: Swift.String)
  public func setErrorTokenAlreadyClaimedText(text: Swift.String)
  public func setWelcomeMessageText(text: Swift.String)
  public func setWelcomeButtonText(text: Swift.String)
  public func setReturnToMainAppButtonText(text: Swift.String)
  public func setTermsAndConditionsTitleText(text: Swift.String)
  public func setTermsAndConditionsDenyButtonText(text: Swift.String)
  public func setTermsAndConditionsAcceptButtonText(text: Swift.String)
  public func setWelcomePermissionMessageText(text: Swift.String)
  public func setWelcomePermissionDetailsText(text: Swift.String)
  public func setWelcomePermissionButtonText(text: Swift.String)
  public func setCameraPermissionMessageText(text: Swift.String)
  public func setCameraPermissionDetailsText(text: Swift.String)
  public func setCameraPermissionDeniedMessageText(text: Swift.String)
  public func setCameraPermissionDeniedDetailsText(text: Swift.String)
  public func setCameraPermissionButtonText(text: Swift.String)
  public func setLocationPermissionMessageText(text: Swift.String)
  public func setLocationPermissionDetailsText(text: Swift.String)
  public func setLocationPermissionDeniedMessageText(text: Swift.String)
  public func setLocationPermissionDeniedDetailsText(text: Swift.String)
  public func setLocationPermissionButtonText(text: Swift.String)
  public func setPermissionDeniedButtonText(text: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AppConstants {
  public static let deviceId: Swift.String
  public static let deviceType: Swift.Int
  public static let emptyUUID: Swift.Int
  public static let emptyLongId: Swift.Int64
  public static let poiBoundsDelta1M: Swift.Double
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.Int, alpha: Swift.Float = 1.0)
  convenience public init(hex: Swift.String, alpha: Swift.Float = 1.0)
}
public class StringWrapper {
  public init()
  public init(value: Swift.String)
  public init(json: [Swift.String : Any])
  public func getValue() -> Swift.String
  public func setValue(value: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LooootConfig {
  public static let webApiProductionUrl: Swift.String
  public static let webProductionUrl: Swift.String
  @objc deinit
}
public class StartSessionModel {
  public init(clientId: Swift.Int64!, playerId: Swift.Int64, campaignIdList: Swift.Array<Swift.Int64>, latitude: Swift.Double, longitude: Swift.Double, currentTime: Swift.String)
  public func getClientId() -> Swift.Int64
  public func setClientId(clientId: Swift.Int64)
  public func getPlayerId() -> Swift.Int64
  public func setPlayerId(playerId: Swift.Int64)
  public func getCampaignIdList() -> Swift.Array<Swift.Int64>
  public func setCampaignIdList(campaignIdList: Swift.Array<Swift.Int64>)
  public func getLatitude() -> Swift.Double
  public func setLatitude(latitude: Swift.Double)
  public func getLongitude() -> Swift.Double
  public func setLongitude(longitude: Swift.Double)
  public func getCurrentTime() -> Swift.String
  public func setCurrentTime(currentTime: Swift.String)
  public func toJson() -> Swift.String
  @objc deinit
}
@objc @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) open class SceneLocationView : ARKit.ARSCNView {
  public enum ARTrackingType {
    case orientationTracking
    case worldTracking
    public static func == (a: Loooot.SceneLocationView.ARTrackingType, b: Loooot.SceneLocationView.ARTrackingType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) weak public var locationViewDelegate: Loooot.SceneLocationViewDelegate?
  @_Concurrency.MainActor(unsafe) weak public var locationEstimateDelegate: Loooot.SceneLocationViewEstimateDelegate?
  @_Concurrency.MainActor(unsafe) weak public var locationNodeTouchDelegate: Loooot.LNTouchDelegate?
  @_Concurrency.MainActor(unsafe) weak public var sceneTrackingDelegate: Loooot.SceneTrackingDelegate?
  @_Concurrency.MainActor(unsafe) final public let sceneLocationManager: Loooot.SceneLocationManager
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var delegate: ARKit.ARSCNViewDelegate? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) weak public var arViewDelegate: ARKit.ARSCNViewDelegate?
  @_Concurrency.MainActor(unsafe) public var locationEstimateMethod: Loooot.LocationEstimateMethod {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var showAxesNode: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var sceneNode: SceneKit.SCNNode? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var orientToTrueNorth: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showFeaturePoints: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var currentScenePosition: SceneKit.SCNVector3? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentEulerAngles: SceneKit.SCNVector3? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var locationNodes: [Loooot.LocationNode] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var polylineNodes: [Loooot.PolylineNode] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var arTrackingType: Loooot.SceneLocationView.ARTrackingType {
    get
  }
  @_Concurrency.MainActor(unsafe) convenience public init(trackingType: Loooot.SceneLocationView.ARTrackingType = .worldTracking, frame: CoreGraphics.CGRect = .zero, options: [Swift.String : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, options: [Swift.String : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 11.0, *)
extension Loooot.SceneLocationView {
  @_Concurrency.MainActor(unsafe) public func run()
  @_Concurrency.MainActor(unsafe) public func pause()
  @_Concurrency.MainActor(unsafe) public func moveSceneHeadingClockwise()
  @_Concurrency.MainActor(unsafe) public func moveSceneHeadingAntiClockwise()
  @_Concurrency.MainActor(unsafe) public func addLocationNodeForCurrentPosition(locationNode: Loooot.LocationNode)
  @_Concurrency.MainActor(unsafe) public func addLocationNodesForCurrentPosition(locationNodes: [Loooot.LocationNode])
  @_Concurrency.MainActor(unsafe) public func addLocationNodeWithConfirmedLocation(locationNode: Loooot.LocationNode)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func sceneLocationViewTouched(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) public func addLocationNodesWithConfirmedLocation(locationNodes: [Loooot.LocationNode])
  @_Concurrency.MainActor(unsafe) public func removeAllNodes()
  @_Concurrency.MainActor(unsafe) public func sceneContainsNodeWithTag(_ tag: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func findNodes(tagged tag: Swift.String) -> [Loooot.LocationNode]
  @_Concurrency.MainActor(unsafe) public func removeLocationNode(locationNode: Loooot.LocationNode)
  @_Concurrency.MainActor(unsafe) public func removeLocationNodes(locationNodes: [Loooot.LocationNode])
}
@available(iOS 11.0, *)
extension Loooot.SceneLocationView {
  @_Concurrency.MainActor(unsafe) public func addRoutes(routes: [MapKit.MKRoute], boxBuilder: Loooot.BoxBuilder? = nil)
  @_Concurrency.MainActor(unsafe) public func removeRoutes(routes: [MapKit.MKRoute])
}
@_hasMissingDesignatedInitializers public class AdType {
  public static let banner: Swift.Int
  public static let interstitial: Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LocationService : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public static var shared: Loooot.LocationService
  public func start()
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class DigiFidelExtendedItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public static let Identifier: Swift.String
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setData(extendedItemModel: Loooot.ExtendedItemModel)
  @_Concurrency.MainActor(unsafe) public func setViewBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setPictureContainerBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRewardTypeTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setTitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setSubtitleTextColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setMessageTextColor(color: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class MapRewardType {
  public init(json: [Swift.String : Any])
  public init()
  public func getRewardTypeId() -> Swift.Int64
  public func setRewardTypeId(rewardTypeId: Swift.Int64)
  public func getCampaignId() -> Swift.Int64
  public func setCampaignId(campaignId: Swift.Int64)
  public func getName() -> Swift.String
  public func setName(name: Swift.String)
  public func getName2() -> Swift.String?
  public func setName2(name2: Swift.String)
  public func getImageUrl() -> Swift.String
  public func setImageUrl(imageUrl: Swift.String)
  public func getMinifiedMapRewardsList() -> Swift.Array<Loooot.MinifiedMapReward>
  public func setMinifiedRewards(minifiedMapRewardList: Swift.Array<Loooot.MinifiedMapReward>)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class RewardViewController : UIKit.UIViewController, UIKit.UINavigationBarDelegate {
  @_Concurrency.MainActor(unsafe) public static let StoryboardName: Swift.String
  @_Concurrency.MainActor(unsafe) public var campaignId: Swift.Int64!
  @_Concurrency.MainActor(unsafe) public var campaignName: Swift.String!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func showAutoDismissAlertWithOneButton(title: Swift.String, message: Swift.String, style: UIKit.UIAlertController.Style = .alert, buttonTitle: Swift.String, buttonStyle: UIKit.UIAlertAction.Style = .default, dismissAfterSeconds: Swift.Int = 10)
  @_Concurrency.MainActor(unsafe) public func setDigifidelBackground()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class AdInterstitialViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static let StoryboardName: Swift.String
  @_Concurrency.MainActor(unsafe) public var ad: Loooot.Ad!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ScalingScheme {
  case normal
  case tiered(threshold: Swift.Double, scale: Swift.Float)
  case doubleTiered(firstThreshold: Swift.Double, firstScale: Swift.Float, secondThreshold: Swift.Double, secondScale: Swift.Float)
  case linear(threshold: Swift.Double)
  case linearBuffer(threshold: Swift.Double, buffer: Swift.Double)
  public func getScheme() -> ((_ distance: Swift.Double, _ adjustedDistance: Swift.Double) -> Swift.Float)
}
public class InitResponse {
  public var playerId: Swift.Int64!
  public var campaignMinifiedList: Swift.Array<Loooot.CampaignMinified>!
  public var isDebug: Swift.Bool!
  public var offsetXGetMarkers: Swift.Int!
  public var offsetYGetMarkers: Swift.Int!
  public var maxTokensDisplayed: Swift.Int!
  public var defaultTimeUpdate: Swift.Int!
  public var shouldGetTokensAfterClaim: Swift.Bool!
  public var disableAR: Swift.Bool!
  public var allowMockLocation: Swift.Bool!
  public var signalRUrl: Swift.String!
  public init()
  public init(playerId: Swift.Int64, campaignsIdList: Swift.Array<Loooot.CampaignMinified>, isDebug: Swift.Bool, offsetXGetMarkers: Swift.Int, offsetYGetMarkers: Swift.Int, maxTokensDisplayed: Swift.Int, defaultTimeUpdate: Swift.Int, shouldGetTokensAfterClaim: Swift.Bool, disableAR: Swift.Bool, allowMockLocation: Swift.Bool, signalRUrl: Swift.String)
  public init(json: [Swift.String : Any])
  public func getPlayerId() -> Swift.Int64
  public func setPlayerId(playerId: Swift.Int64)
  public func getCampaignMinifiedList() -> Swift.Array<Loooot.CampaignMinified>
  public func setCampaignMinifiedList(campaignMinifiedList: Swift.Array<Loooot.CampaignMinified>)
  public func isDebugMode() -> Swift.Bool
  public func setDebug(debug: Swift.Bool)
  public func getOffsetXGetMarkers() -> Swift.Int
  public func getOffsetYGetMarkers() -> Swift.Int
  public func getMaxTokensDisplayed() -> Swift.Int
  public func getDefaultTimeUpdate() -> Swift.Int
  public func getShouldGetTokensAfterClaim() -> Swift.Bool
  public func isDisableAR() -> Swift.Bool
  public func getAllowMockLocation() -> Swift.Bool
  public func setAllowMockLocation(allowMockLocation: Swift.Bool)
  public func getSignalRUrl() -> Swift.String
  public func setSignalRUrl(signalRUrl: Swift.String)
  public func initInitResponse(playerId: Swift.Int64, campaignMinifiedList: Swift.Array<Loooot.CampaignMinified>, isDebug: Swift.Bool, offsetXGetMarkers: Swift.Int, offsetYGetMarkers: Swift.Int, maxTokensDisplayed: Swift.Int, defaultTimeUpdate: Swift.Int, shouldGetTokensAfterClaim: Swift.Bool, disableAR: Swift.Bool, allowMockLocation: Swift.Bool, signalRUrl: Swift.String)
  @objc deinit
}
public class EndSessionModel {
  public init(playerId: Swift.Int64, sessionId: Swift.Int64!, currentTime: Swift.String)
  public func getPlayerId() -> Swift.Int64
  public func setPlayerId(playerId: Swift.Int64)
  public func getSessionId() -> Swift.Int64
  public func setSessionId(sessionId: Swift.Int64)
  public func getCurrentTime() -> Swift.String
  public func setCurrentTime(currentTime: Swift.String)
  public func toJson() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BackgroundHelper {
  public static var shared: Loooot.BackgroundHelper
  public func getBackground() -> QuartzCore.CALayer
  public func getBackgroundInternal() -> QuartzCore.CALayer
  @objc deinit
}
extension SceneKit.SCNVector3 {
  public func distance(to anotherVector: SceneKit.SCNVector3) -> Swift.Float
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DigifidelBackgroundHelper : Loooot.BackgroundHelper {
  override public func getBackgroundInternal() -> QuartzCore.CALayer
  @objc deinit
}
extension Loooot.Reachability.Connection : Swift.Equatable {}
extension Loooot.Reachability.Connection : Swift.Hashable {}
extension Loooot.LocationEstimateMethod : Swift.Equatable {}
extension Loooot.LocationEstimateMethod : Swift.Hashable {}
extension Loooot.LooootClientIdEnum : Swift.Equatable {}
extension Loooot.LooootClientIdEnum : Swift.Hashable {}
extension Loooot.LooootClientIdEnum : Swift.RawRepresentable {}
@available(iOS 11.0, *)
extension Loooot.SceneLocationView.ARTrackingType : Swift.Equatable {}
@available(iOS 11.0, *)
extension Loooot.SceneLocationView.ARTrackingType : Swift.Hashable {}
